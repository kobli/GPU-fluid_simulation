#version 430 core
#define M_PI 3.141592f
#define UP vec3(0,1,0)
layout (local_size_x = 1024) in;

struct CellRec {
	uint firstParticleID;
	uint particleN;
};

layout (std430, binding = 0) buffer Densities {
	float density[];
};

layout (std430, binding = 1) buffer ParticlePositions {
	readonly vec3 particlePos[];
};

layout (std430, binding = 2) buffer ParticlePositionsOut {
	vec3 particlePosOut[];
};

layout (std430, binding = 3) buffer ParticleVelocities {
	vec3 particleVel[];
};

layout (std430, binding = 5) buffer CellRecords {
	CellRec cellRec[];
};

uniform float Step;
uniform float H;
uniform float M;
uniform float Rho0;
uniform float K;
uniform float Mu;
uniform uint SubdivisionN;
uniform vec3 boundsMin;
uniform vec3 boundsMax;

vec3 wPresure1(vec3 r, float h) {
	float rLen = length(r);
	if(rLen > 0 && rLen <= h)
		return r * float(1./rLen * 45./(M_PI*pow(h,6)) * pow(h-rLen, 2));
	return vec3(0,0,0);
}

float wViscosity2(vec3 r, float h) {
	float rLen = length(r);
	if(rLen >= 0 && rLen <= h)
		return 45./(M_PI*pow(h,6))*(h-rLen);
	return 0;
}

bool pointOutsideBounds(vec3 p, vec3 bmin, vec3 bmax, out vec3 n) {
	bool r = true;
	if(p.x < bmin.x)
		n = vec3(1,0,0);
	else if(p.x > bmax.x)
		n = vec3(-1,0,0);
	else if(p.y < bmin.y)
		n = vec3(0,1,0);
	else if(p.y > bmax.y)
		n = vec3(0,-1,0);
	else if(p.z < bmin.z)
		n = vec3(0,0,1);
	else if(p.z > bmax.z)
		n = vec3(0,0,-1);
	else
		r = false;
	return r;
}

void collide(uint i) {
	vec3 surfaceNormal;
	float velL = length(particleVel[i]);
	if(pointOutsideBounds(particlePosOut[i], boundsMin, boundsMax, surfaceNormal) && velL > 0 && !isinf(velL)) {
		particlePosOut[i] += -particleVel[i]*Step;
		vec3 d = -particleVel[i]/velL;
		particleVel[i] = (2*dot(d, surfaceNormal)*surfaceNormal-d)*velL;
	}
}

uint cellPosToID(uvec3 c) {
	return c.x*SubdivisionN*SubdivisionN + c.y*SubdivisionN + c.z;
}

uint nnCells(vec3 p, out uint neighbourCells[27]) {
	vec3 c = ((p - boundsMin) / (boundsMax - boundsMin)) * float(SubdivisionN);
	int cx = int(c.x);
	int cy = int(c.y);
	int cz = int(c.z);
	const int maxC = int(SubdivisionN)-1;
	uint neighbourCellN = 0;
	for(int x = max(0, cx-1); x <= min(maxC, cx+1); ++x) {
		for(int y = max(0, cy-1); y <= min(maxC, cy+1); ++y) {
			for(int z = max(0, cz-1); z <= min(maxC, cz+1); ++z) {
				neighbourCells[neighbourCellN] = cellPosToID(uvec3(x,y,z));
				++neighbourCellN;
			}
		}
	}
	return neighbourCellN;
}

void main(void) {
	uint i = gl_GlobalInvocationID.x;
	float pressurei = K*(density[i]-Rho0);
	vec3 fPressure = vec3(0,0,0);
	vec3 fViscosity = vec3(0,0,0);
	uint neighbourCells[27];
	uint neighbourCellN = nnCells(particlePos[i], neighbourCells);
	for(uint neighbourI = 0; neighbourI < neighbourCellN; ++neighbourI) {
		CellRec r = cellRec[neighbourCells[neighbourI]];
		for(uint j = r.firstParticleID; j < r.firstParticleID+r.particleN; ++j) {
			float pressurej = K*(density[j]-Rho0);
			fPressure += M*(pressurei+pressurej)/(2*density[j])*wPresure1(particlePos[i]-particlePos[j], H);
			fViscosity += (particleVel[j]-particleVel[i])*float(Mu*M/density[j]*wViscosity2(particlePos[i]-particlePos[j], H));
		}
	}
	vec3 fGravity = -UP*9.81f*density[i];
	vec3 f = fViscosity + fPressure + fGravity;
	vec3 a = f/density[i];
	// update position using the current speed
	particlePosOut[i] = particlePos[i] + particleVel[i]*Step;
	// update speed using the computed acceleration
	particleVel[i] += a*Step;
	collide(i);
}
